/*** Author :Vibhav Gogate
The University of Texas at Dallas
*****/


import java.awt.AlphaComposite;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import javax.imageio.ImageIO;
 

public class KMeans {
    public static void main(String [] args){
	if (args.length < 3){
	    System.out.println("Usage: Kmeans <input-image> <k> <output-image>");
	    return;
	}
	try{
	    BufferedImage originalImage = ImageIO.read(new File(args[0]));
	    int k=Integer.parseInt(args[1]);
	    BufferedImage kmeansJpg = kmeans_helper(originalImage,k);
	    ImageIO.write(kmeansJpg, "jpg", new File(args[2])); 
	    
	}catch(IOException e){
	    System.out.println(e.getMessage());
	}	
    }
    
    private static BufferedImage kmeans_helper(BufferedImage originalImage, int k){
	int w=originalImage.getWidth();
	int h=originalImage.getHeight();
	BufferedImage kmeansImage = new BufferedImage(w,h,originalImage.getType());
	Graphics2D g = kmeansImage.createGraphics();
	g.drawImage(originalImage, 0, 0, w,h , null);
	// Read rgb values from the image
	int[] rgb=new int[w*h];
	int count=0;
	for(int i=0;i<w;i++){
	    for(int j=0;j<h;j++){
		rgb[count++]=kmeansImage.getRGB(i,j);
	    }
	}
	// Call kmeans algorithm: update the rgb values
	kmeans(rgb,k);

	// Write the new rgb values to the image
	count=0;
	for(int i=0;i<w;i++){
	    for(int j=0;j<h;j++){
		kmeansImage.setRGB(i,j,rgb[count++]);
	    }
	}
	return kmeansImage;
    }

    // Your k-means code goes here
    // Update the array rgb by assigning each entry in the rgb array to its cluster center
    private static void kmeans(int[] rgb, int k){
    	
    	// Define Variables
    	ArrayList<Integer> current_ks = new ArrayList<Integer>();
    	ArrayList<Integer> previous_ks = new ArrayList<Integer>();
    	Map<Integer, ArrayList<Integer>> itemPerK = new HashMap<Integer,ArrayList<Integer>>();
    	
    	//-----------
    	//------Selecting K points---------------
    	
    	Random rndm = new Random();
    	for(int i=0;i<k;i++){
    		int selectedRgb = rgb[rndm.nextInt(rgb.length)];
    		if(!current_ks.contains(selectedRgb)){ //whether this rgb already slected or not
    			current_ks.add(selectedRgb);
    			//previous_ks.add(selectedRgb);
    		}
    	}
    	
    	do{
    	//for(int Iteration=0;Iteration<=100;Iteration++){	
    		for(int curItem:current_ks){
    			previous_ks.add(curItem);
    		}
    		
    		itemPerK = new HashMap<Integer,ArrayList<Integer>>();
    		
    		for(int i=0;i<rgb.length;i++){
    			double mindis = 9999;
    			int c = 0;
    			
    			for(int center:current_ks){
    				if(distance(rgb[i],center)<mindis){
    					mindis = distance(rgb[i],center);
    					c = center;
    				}
    			}
    			
    			ArrayList<Integer> items;
    			if(itemPerK.containsKey(c)){
    				items = itemPerK.get(c);
    			}else{
    				items = new ArrayList<Integer>();
    			}
    			items.add(rgb[i]);
				itemPerK.put(c, items);
    		}
    		
    		current_ks.clear();
    		
    		double tR = 0.0;
    		double tG = 0.0;
    		double tB = 0.0;
    		int curCenter =0;
    		double ln =0;
    		
    		for(int center:itemPerK.keySet()){
    			tR = 0.0;
    			tG = 0.0;
    			tB = 0.0;
    			
    			for(int item:itemPerK.get(center)){
    				tR += (item&0x00FF0000)>>16;
    				tG += (item&0x0000FF00)>>8;
    				tB += (item&0x000000FF);
    			}
    			
    			ln = itemPerK.get(center).size();
    			curCenter = (((int)(tR/ln)&0x0ff)<<16)|(((int)(tG/ln)&0x0ff)<<8)|(((int)(tB/ln)&0x0ff)<<0);
    			current_ks.add(curCenter);
    		}
    		
    		
    	}while(!hasSameItems(current_ks, previous_ks));
    	
    	
    	for(int i=0;i<rgb.length;i++){
    		for(int center:itemPerK.keySet()){
    			if(itemPerK.get(center).contains(rgb[i])){
    				rgb[i] = center;
    			}
    		}
    	}
    	
    	
    }
    
    private static double distance(int curRgb, int center){
    	
    	int rDiff = ((curRgb&0x00FF0000)>>16) - ((center&0x00FF0000)>>16);
	    int gDiff = ((curRgb&0x0000FF00)>>8) - ((center&0x0000FF00)>>8);
	    int bDiff = (curRgb&0x000000FF) - (center&0x000000FF);
	    
    	return Math.sqrt(rDiff*rDiff + gDiff*gDiff + bDiff*bDiff);
    }
    
    private static boolean hasSameItems(ArrayList<Integer> current_ks, ArrayList<Integer> previous_ks){
    	
    	boolean isSameList = true;
    	
    	for(int counter = 0; counter < current_ks.size(); counter++) {
    	    if(!previous_ks.contains(current_ks.get(counter))) {
    	    	isSameList = false;
    	      }
    	  }
    	
    	return isSameList;
    }

}
